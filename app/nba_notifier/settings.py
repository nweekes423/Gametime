"""
Django settings for nba_notifier project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
from celery.schedules import crontab
from celery import Celery
from dotenv import load_dotenv

BASE_DIR = Path(__file__).resolve().parent

load_dotenv()

# Running 'python manage.py check --deploy' identifies security issues in the Django project.
# Below are recommendations to resolve some of the identified issues.

# Set the HSTS (HTTP Strict Transport Security) header duration to 1 year (in seconds).
SECURE_HSTS_SECONDS = 31536000  # 1 year

# Enable SSL redirect, ensuring that all connections are redirected to HTTPS.
#Set to False for non ssl
#Set to False for non-SSL
SECURE_SSL_REDIRECT = False

# Use a secure-only session cookie, making it more resistant to session hijacking.
SESSION_COOKIE_SECURE = False

# Use a secure-only CSRF (Cross-Site Request Forgery) cookie, enhancing security against CSRF attacks.
CSRF_COOKIE_SECURE = False

# Enable using X-Forwarded-Proto header to determine request security.
# Set to True to make the development server treat requests as HTTPS.
USE_X_FORWARDED_PROTO = False

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')  # Keep this line for reverse proxy configuration



# Content Security Policy (CSP) header configuration to define a policy
# for controlling the types of resources that a user agent is allowed to load
# for a given page. CSP enhances security by preventing or mitigating
# various types of attacks, such as Cross-Site Scripting (XSS) and data injection.
CSP_HEADER = {
    'default-src': ["'self'"],
    'style-src': ["'self'", 'maxcdn.bootstrapcdn.com'],
    'script-src': ["'self'", 'code.jquery.com'],

}

# Use environment variables
SECRET_KEY = os.getenv("SECRET_KEY", "default-secret-key")
TWILIO_ACCOUNT_SID = os.getenv("TWILIO_ACCOUNT_SID", "default-sid")
TWILIO_AUTH_TOKEN = os.getenv("TWILIO_AUTH_TOKEN", "default-token")
TWILIO_PHONE_NUMBER = os.getenv("TWILIO_PHONE_NUMBER", "+18888354844")

CELERY_RESULT_BACKEND = (
    "redis://localhost:6379/0"  # Use the same Redis instance as your broker
)

# Checks scores every 5 minutes, adjust as needed. See if can check at cert
CELERY_BEAT_SCHEDULE = {
    "start-daily-game-checks": {
        "task": "game_monitor.tasks.start_game_checks",
        # Runs daily at 12:30 AM UTC, which is 4:30 PM PST
        "schedule": crontab(hour=0, minute=30),
        "args": (),
    },
    "frequent-game-score-checks": {
        "task": "game_monitor.tasks.frequent_game_score_checks",
        # Runs every 5 minutes
        "schedule": crontab(minute="*/5"),
        "args": (),
    },
}

STATIC_ROOT = BASE_DIR / 'staticfiles'
STATIC_URL = '/static/'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

# Just 0.0.0.0 doesn't work due to python manage.py check --deploy security recommendations.
#ALLOWED_HOSTS = ['127.0.0.1', 'localhost', '0.0.0.0', '[::1]', 'localhost:8001']
ALLOWED_HOSTS = ['*']


SSL_CERTIFICATE_PATH = 'ssl/localhost.crt'
SSL_KEY_PATH = 'ssl/localhost.key'


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "json": {
            "()": "pythonjsonlogger.jsonlogger.JsonFormatter",
            "fmt": "%(levelname)s %(name)s %(message)s %(asctime)s",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "json",
        },
        # Optionally, you can set up a file handler
        "file": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(BASE_DIR, "logs/django.log"),
            "formatter": "json",
            "maxBytes": 1024 * 1024 * 5,  # 5 MB
            "backupCount": 5,
        },
        "celery_file": {  # New Celery file handler
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(BASE_DIR, "logs/celery.log"),
            "formatter": "json",
            "maxBytes": 1024 * 1024 * 5,  # 5 MB
            "backupCount": 5,
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console", "file"],
            "level": "INFO",
        },
        # Configure other loggers...
    },
}

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django_extensions",
    'sslserver',
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "game_monitor.apps.GameMonitorConfig",  # Include your app using AppConfig
    "django_celery_beat",
    "nba_notifier",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
]

ROOT_URLCONF = "nba_notifier.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "game_monitor", "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.csrf",  # Added for CSRF token
            ],
        },
    },
]

WSGI_APPLICATION = "nba_notifier.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Celery settings
CELERY_BROKER_URL = "redis://localhost:6379/0"  # Adjust as per your Redis config
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
